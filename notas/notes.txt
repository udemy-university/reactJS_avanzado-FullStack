GraphQL = Graph Query Language
Similar a SQL, ya que es utilizado para realizar consultas.
Para utilizarlo, realizar consultar y leer los resultados, deberás tener GraphQL instalado en tu servidor.
Se puede usar con cualquier lenguaje backend. Muy relacionado con React.

Hay separación entre la Base de Datos y el Cliente. Hay una capa de abstracción (seguridad).
Corre sobre Base de datos Relacionales y No Relacionales.
Se puede conectar con cualquier ORM (mongoose).
Se puede utilizar GraphQL sobre una base de datos ya existente.

GraphQL es desarrollado pensando en el performance, en utilizar únicamente los datos que necesitamos.

Problemas de las API's
/AUTOS/
/AUTOS/MARCA/
/AUTOS/MARCA/2015/AUTOMATICO/
/AUTOS/MARCA/2014/4_CILINDROS/
/AUTOS/MARCA/2008/4_PUERTAS/
Muchos endpoints en base a necesidades.

En GraphQL no sucede.
query{
	autos(year: 2008){
		marca
		modelo
		transmision
		puertas
}

query{
	autos(year: 2012, marca: "BMW"){
		marca
		modelo
		transmision
		puertas
	}
}

Se le pueden pasar variables y hacer las queries inteligentes.

Entre sus beneficios encontrarás que puedes realizar consultas y mostrar los datos que necesitas.
No requieres crear nuevos endpoints.
No importa la versión ya que siempre es compatible con versiones anteriores.
Se puede instalar sobre una API o una base de datos ya existente.
Independiente del lenguaje.

Cuando creamos un mutation y le pasamos los campos al input, al lado del tipo del dato
le podemos poner un ! significa que el campo es obligatorio
Ej: nombre: String!

Tipos de datos GraphQL
- INT
- FLOAT
- STRING
- ID: número único
- BOOLEAN

Comentarios:
- #: Comentario simple comenzando con numeral de una linea.
- """ Descripción """: Descripción que te permite visualizar el graphqli para saber que es cada cosa.

Alias en GraphQL:
si queremos ejecutar dos veces la misma query GraphQL no te dejará. Hay que usar alias de la siguiente manera:
query {
	'alias1': metodo(){
		campos a devolver
	}

	'alias2': metodo(){
		campos a devolver
	}
}
todo lo que devuelve está en un objeto llamado data.

Cuando tienes consultas similares pero cuyos argumentos son distintos se soluciona con fragments

Apollo es una plataforma que te permitirá realizar consultas a tus datos de graphql.
Con apollo te será muy sencillo conectar tus aplicaciones react con graphql.
Disponible para: Angular, JavaScript y React Native.

Apollo:
API para realizar queries y mutations
cachear las consultas y datos
Es necesario configurar un cliente y un servidor (Apollo Cliente y Server)
Sintaxis similar a redux
Existen otras opciones como relay o graphql-yoga

Chrome (extensiones) => Apollo Dev Tools

React Apollo => pollInterval, cada cuantos segundos la base se refresca y no muestra solo lo que tiene cacheado.