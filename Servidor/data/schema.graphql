type Cliente{
		id: ID
		nombre: String
		apellido: String
		empresa: String
		emails: [Email]
		edad: Int
		tipo: TipoCliente
}
type Email {
	email: String
}
type Producto {
	id: ID
	nombre: String!,
	precio: Int!,
	stock: Int!
}
type Pedido {
	id: ID
	pedido: [PedidoProducto]
	total: Int
	fecha: String
	cliente: ID
	estado: EstadoPedido
}
type PedidoProducto {
	id: ID
	cantidad: Int
}
enum TipoCliente {
	BASICO
	PREMIUN
}
enum EstadoPedido {
	PENDIENTE
	COMPLETADO
	CANCELADO
}

type Query{
	# Clientes
	getClientes(limite: Int, offset: Int): [Cliente]
	getCliente(id: ID): Cliente
	totalClientes: String,

	# Productos
	obtenerProductos(limite: Int, offset: Int, stock: Boolean): [Producto]
	obtenerProducto(id: ID): Producto
	totalProductos: String

	#Pedidos
	obtenerPedidos(cliente: String): [Pedido]
}
input EmailInput {
	email: String
}
""" Campos para los clientes nuevos """
input ClienteInput {
	id: ID
	nombre: String!
	apellido: String!
	empresa: String!
	emails: [EmailInput]!
	edad: Int!
	tipo: TipoCliente!
	pedidos: [PedidoInput]
}

input ProductoInput {
	id: ID
	nombre: String!,
	precio: Int!,
	stock: Int!
}

input PedidoInput {
	id: ID
	pedido: [PedidoProductoInput]
	total: Int
	fecha: String
	cliente: ID
	estado: EstadoPedido
}

input PedidoProductoInput {
	id: ID
	cantidad: Int
}

""" Mutations para crear nuevos Clientes """
type Mutation {
	#Nombre del Resolver, Input con Datos y Valor que Retorna
	""" Te Permite crear nuevos Clientes """
	crearCliente(input: ClienteInput) : Cliente
	actualizarCliente(input: ClienteInput) : Cliente
	eliminarCliente(id: ID!) : String
	#Productos
	nuevoProducto(input: ProductoInput) : Producto
	actualizarProducto(input: ProductoInput) : Producto
	eliminarProducto(id: ID!) : String
	#Pedidos
	nuevoPedido(input: PedidoInput): Pedido
}